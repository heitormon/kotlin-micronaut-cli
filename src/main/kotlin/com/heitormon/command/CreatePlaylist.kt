package com.heitormon.command

import com.heitormon.api.spotify.client.SpotifyApiClientHttp
import com.heitormon.api.spotify.model.ProcessVariables
import com.heitormon.api.spotify.model.SpotifyGenres
import com.heitormon.api.spotify.model.dto.SpotifyAddTrackPlaylistRequest
import com.heitormon.api.spotify.model.dto.SpotifyCreatePlaylistRequest
import io.micronaut.http.HttpStatus
import io.micronaut.http.client.exceptions.HttpClientResponseException
import jakarta.inject.Inject
import picocli.CommandLine
import picocli.CommandLine.Command
import picocli.CommandLine.Option
import kotlin.streams.toList

@Command(name = "create-playlist-by-genre", description = ["Create Spotify Playlist From Genre"],
        mixinStandardHelpOptions = true)
class CreatePlaylist : SpotifyBaseCommand() {
    @Inject
    lateinit var spotifyApiClientHttp: SpotifyApiClientHttp

    private lateinit var playlistGenre: String

    @Option(names = ["--genre", "-g"], required = true, completionCandidates = SpotifyGenres::class, description = ["Playlist genre available: \${COMPLETION-CANDIDATES}"])
    fun setPlaylistGenreOption(genre: String) {
        val spotifyGenres = SpotifyGenres()
        if (!spotifyGenres.contains(genre)) {
            throw
            CommandLine.ParameterException(
                    spec?.commandLine(),
                    "Invalid Genre")
        }
        this.playlistGenre = genre
    }

    override fun run() {
        try {
            println("Running Spotify Youtube Command")
            setup(spotifyApiClientHttp)
            val searchTrack = spotifyApiClientHttp.searchByGenre("genre:${this.playlistGenre}", "track")
            val createPlaylist = spotifyApiClientHttp.createPlaylist(ProcessVariables.user,
                    SpotifyCreatePlaylistRequest(name = this.playlistName,
                            collaborative = false,
                            public = false,
                            description = "Playlist generated by spotify-cli genre: ${this.playlistGenre}"))
            searchTrack.items.results = searchTrack.items.results.slice(0 until playlistSize)
            spotifyApiClientHttp.addTrackInPlaylist(createPlaylist.playlistId,
                    SpotifyAddTrackPlaylistRequest(searchTrack.items.results.stream().map { item -> item.link }.toList()))
        } catch (httpError: HttpClientResponseException) {
            if (httpError.status.equals(HttpStatus.UNAUTHORIZED)) throw CommandLine.ParameterException(
                    spec?.commandLine(),
                    "Please refresh the OAUTH token")

        }


    }
}
